security:
    encoders:
        App\Entity\Administrator:
            algorithm: 'auto'

    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\Administrator
                property: username
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            anonymous: true
            guard:
                authenticators:
                    - App\Security\AdminLoginAuthenticator
            logout:
                path: app_logout
                # where to redirect after logout
                target: /login

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#firewalls-authentication

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/_profiler/, roles: ROLE_USER }
        - { path: ^/login/success, roles: ROLE_USER }
        - { path: ^/games/, roles: ROLE_USER }
        - { path: ^/games/new, roles: ROLE_USER }
        - { path: ^/games/gameid/edit, roles: ROLE_USER }
        - { path: ^/games/new, roles: ROLE_USER }

        - { path: ^/gamereqs/, roles: ROLE_USER }
        - { path: ^/gamereqs/new, roles: ROLE_USER }
        - { path: ^/gamereqs/gamerid/edit, roles: ROLE_USER }
        - { path: ^/gamereqs/gamerid, roles: ROLE_USER }

        - { path: ^/logins/, roles: ROLE_USER }
        - { path: ^/logins/new, roles: ROLE_USER }
        - { path: ^/logins/loginid/edit, roles: ROLE_USER }
        - { path: ^/logins/loginid, roles: ROLE_USER }

        - { path: ^/_profiler/, roles: ROLE_USER_IP, ip: 127.0.0.1 }
        - { path: ^/login/success, roles: ROLE_USER_IP, ip: 127.0.0.1 }
        - { path: ^/games/, roles: ROLE_USER_IP, ip: 127.0.0.1 }
        - { path: ^/games/new, roles: ROLE_USER_IP, ip: 127.0.0.1 }
        - { path: ^/games/gameid/edit, roles: ROLE_USER_IP, ip: 127.0.0.1 }
        - { path: ^/games/new, roles: ROLE_USER_IP, ip: 127.0.0.1 }

        - { path: ^/gamereqs/, roles: ROLE_USER_IP, ip: 127.0.0.1 }
        - { path: ^/gamereqs/new, roles: ROLE_USER_IP, ip: 127.0.0.1 }
        - { path: ^/gamereqs/gamerid/edit, roles: ROLE_USER_IP, ip: 127.0.0.1 }
        - { path: ^/gamereqs/gamerid, roles: ROLE_USER_IP, ip: 127.0.0.1 }

        - { path: ^/loginu/, roles: ROLE_USER_IP, ip: 127.0.0.1 }
        - { path: ^/loginu/new, roles: ROLE_USER_IP, ip: 127.0.0.1 }
        - { path: ^/loginu/loginid/edit, roles: ROLE_USER_IP, ip: 127.0.0.1 }
        - { path: ^/loginu/loginid, roles: ROLE_USER_IP, ip: 127.0.0.1 }
# this is the access control where i set the paths that the anonymous users 
# can't access they have to be authenticated with the role user in order to allow them

